{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"System building with Dyalog APL","text":""},{"location":"#hello-you","title":"Hello you","text":"<p>You want to write an application in Dyalog APL.  You have already succeeded in turning some of your specialist knowledge into functions that help your work.  The code works for you! </p> <p>Now you want to take it to the next level.  At the very least make it more robust and handy for your own use. Possibly turn it into an application others can use. Perhaps even pay you for! </p> <p>We assume </p> <ul> <li>you don\u2019t have experience in software development</li> <li>your code is in stored by Link in text files and that you run it in the session</li> </ul> <p>(If you haven\u2019t got this far yet, the resources at learn.dyalog.com are probably more helpful.)</p>"},{"location":"#minimum-developer-skills","title":"Minimum developer skills","text":"<p>You\u2019re not a professional software developer.  You don\u2019t want to become one.  Does that mean you need to hire a software developer to continue?</p> <p>It does not. Our aim here \u2013 extending what you\u2019ve already achieved \u2013 is to introduce the minimum skills you need to turn your code into Your Application. </p>"},{"location":"#whats-here","title":"What\u2019s here","text":"Articles The articles introduce various aspects of producing a software application. Development tools Profit from the experience of seasoned APL developers \u00ba\u2013 adopt their tools! System functions The most useful code packages are built right into the interpreter, always there. Library Code packages for common tasks: no need to reinvent the wheel. Examples We take a tiny group of functions and turn them into a code package, a DSL, a desktop application, a Web application, and a Web service (API)."},{"location":"workbench/","title":"Tools for the job","text":"<p>Like any craftperson, you need the right tools on hand. Some of them are likely to be new to you.</p> <p>These tools are rich in commands, features and options, but as a solo developer you do not need more than the basics. You will find ample tutorials on the Web. </p> <p>For each, take some study time to familiarise yourself with the basics and bookmark where to learn more when you need it.</p>"},{"location":"workbench/#command-shell","title":"Command shell","text":"<p>This is where you command  the computer\u2019s operating system to run programs or copy, move or delete files.</p> <p>The command shell is a window in which the computer executes commands you type, not unlike the APL session.  The Windows command shell is PowerShell, and the Mac command shell is the Terminal app, which runs Zsh. (If you use Linux, you will almost certainly already be familiar with the Bash or Zsh command shells.)</p> <p>Example: Delete all files with extension <code>doc</code>:</p>  Windows macOS Linux <pre><code>&gt; del *.doc\n</code></pre> <pre><code>$ rm *.doc\n</code></pre> <pre><code>$ rm *.doc\n</code></pre> <p>Commands can be combined into programs and saved in files as scripts.</p>"},{"location":"workbench/#regular-expressions","title":"Regular expressions","text":"<p>Operating-system commands rely heavily on Regular Expressions, a syntax for patterns that can be matched to text strings. </p> <p>For example the regex <code>*.doc</code> matches the name of any file with the <code>doc</code> extension. </p>"},{"location":"workbench/#apl-user-commands","title":"APL user commands","text":"<p>APL User Commands are like operating-system commands, but run inside your session. Just as you can define your own shell commands, you can define your own APL user commands.</p>"},{"location":"workbench/#source-code-manager","title":"Source-code manager","text":"<p>You are already using Link, which stores your code and variables in text files. Those files are your code base, and your code base needs managing.</p> <p>You manage it so you always have a tested, working version, known as the <code>main</code> branch. (Perhaps one should think of it as the trunk.) To improve it, you check out a new feature branch to edit. When you are satisfied with the changes, you merge them back into the trunk \u2013 the <code>main</code> branch. </p> <p>Each merge into the trunk is recorded as a commit. A commit functions as a save point.  If you find you need to, you can \u2018roll back\u2019 to an earlier commit.  Nothing is lost.  And you can easily inspect the differences between two commits.</p> <p>The most widely used source-code manager is Git.</p> <p>DadoFlow is a radically simplified Git branching model and workflow designed for APL programmers.</p> <p> A Git workflow for Dyalog APL</p>"},{"location":"workbench/#interactive-development-environment","title":"Interactive development environment","text":"<p>The Dyalog IDE is all you need for editing, running and debugging your APL code, but lacks tool for search-and-replace.  For example, suppose you need to change all references to <code>GLOBALVAR</code> to <code>GLOBAL_VAR</code>?</p> <ul> <li>If you are familiar with the Visual Studio Code IDE, you might prefer to edit your code in that.</li> <li>A good text editor will allow you to search and replace through folders of files. (Some popular choices are Sublime Text and Atom.)</li> <li>The Fire APL package offers a GUI for find-and-replace within the workspace. </li> </ul>"},{"location":"workbench/#github","title":"GitHub","text":"<p>GitHub is a platform on which developers share code and collaborate on it. As a solo developer you can manage without it, but GitHub is a great way to back up (all versions of) your source. Your users would probably prefer you keep backups somewhere safe!</p> <p>Git will show you the differences (diff) between two commits, but if you\u2018re using it from the command shell its diff displays can be a little cryptic.  A GitHub diff is easier to read.</p>"},{"location":"workbench/#tests","title":"Tests","text":"<p>As you wrote your code, you wrote expressions to confirm it returns the right results. </p> <p>Now, as you extend and modify your system, use tests to ensure your changes don\u2019t break anything that worked before.  Good practice is to keep a suite of test cases and run all of them before merging a feature branch back into the trunk. </p> <p>The test suite grows as you add features to the code.</p> <p>Any time a bug is identified, start by writing a test that replicates the problem (i.e. fails), edit the code until the test passes, then run the whole suite to check you didn\u2019t break anything else.</p> <p>Consider practising Test-Driven Development: for each new feature, treat its absence as if it were a bug, and start by writing the tests it is to pass. </p> <p>You need a way of running tests and inspecting the results.</p> <p> Devt Tools/Testing</p>"},{"location":"workbench/#packages","title":"Packages","text":"<p>Feel free to write all the APL code you need by yourself! (Such fun.) Or \u2013 use or adapt packages written by other APLers who have had to deal with the same problem. </p> <p>The Tatin package manager manages APL code libraries to ensure you get the packages and versions you want.</p> <p>The Cider project manager keeps track of which versions of which packages your application uses, and the packages on which they themselves depend.</p> <p>Tatin and Cider are included wth Dyalog 19.0 and better.</p>"},{"location":"articles/","title":"Make your code usable","text":"<p>Making your code usable by others means solving certain problems.</p>  Handling errors If your code breaks when someone else is running it, you want to know about the problem so you can investigate it.  Logging Have your code write a log of what it\u2019s doing. Investigating a problem becomes immensely easier.  Validate inputs <p>You know what your code is for; you pass it only suitable data.</p> <p>But your user might not be so clear.  Protect her from crashes by validating what she puts in. </p>  Help You know how to use your code. What should you tell your user and how?"},{"location":"articles/configuration/","title":"Configuration","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/containers/","title":"Containers","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/dotnet/","title":"DotNet","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/errors/","title":"Handling errors","text":"<p>What to do when your code breaks in someone else\u2019s hands</p> <p>If your code breaks when you\u2018re running it in the workspace, you investigate the suspended state. But if your code breaks when someone else is running it, you want to know about the problem so you can investigate it.</p> <p>If your user is familiar with APL, she can simply save and send you the workspace with all the state suspended. </p> <p>Otherwise, you need a way to get the state saved for examination, and to restore control to the user.</p> <p>FIXME This page is a stub.</p>"},{"location":"articles/filesystem/","title":"Files","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/gui/","title":"GUI","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/help/","title":"Help","text":"<p>You know how to use your code. What and how should you tell your user?</p> <p>What you tell your user will depend upon how you make the code available to her. </p> <ul> <li>If she writes APL then formal documentation might be best.</li> <li>If you provide an application with a GUI you could equip it with a Help subsystem and hints on the controls.</li> <li>If you offer an API, you could use the OpenAPI Specification (Swagger) to describe it, and make error messages as helpful as possible.</li> </ul> <p>FIXME This page is a stub.</p>"},{"location":"articles/ipc/","title":"IPC","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/logging/","title":"Logging","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/packages/","title":"Packages","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/project/","title":"Project","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/source-code/","title":"Source-code","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/testing/","title":"Testing","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/text/","title":"Text","text":"<p>FIXME This page is a stub.</p>"},{"location":"articles/transforms/","title":"Transforms","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/","title":"Index","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/code-management/","title":"Code management","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/error-handling/","title":"Error handling","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/find-replace/","title":"Find replace","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/ide/","title":"Ide","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/logging/","title":"Logging","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/package-manager/","title":"Package manager","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/project-manager/","title":"Project manager","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/testing/","title":"Testing","text":"<p>FIXME This page is a stub.</p>"},{"location":"devtools/user-commands/","title":"User commands","text":"<p>FIXME This page is a stub.</p>"},{"location":"examples/","title":"About","text":"<p>FIXME This page is a stub.</p>"},{"location":"examples/desktop/","title":"Desktop","text":"<p>FIXME This page is a stub.</p>"},{"location":"examples/dsl/","title":"DSL","text":"<p>FIXME This page is a stub.</p>"},{"location":"examples/package/","title":"Package","text":"<p>FIXME This page is a stub.</p>"},{"location":"examples/web-app/","title":"Web app","text":"<p>FIXME This page is a stub.</p>"},{"location":"examples/web-service/","title":"Web service","text":"<p>FIXME This page is a stub.</p>"},{"location":"library/","title":"About","text":"<p>FIXME This page is a stub.</p>"},{"location":"library/ews/","title":"EWS","text":"<p>FIXME This page is a stub.</p>"},{"location":"library/httpcommand/","title":"HttpCommand","text":"<p>FIXME This page is a stub.</p>"},{"location":"library/jarvis/","title":"Jarvis","text":"<p>FIXME This page is a stub.</p>"},{"location":"sysfns/","title":"About","text":"<p>FIXME This page is a stub.</p>"},{"location":"sysfns/qcsv/","title":"\u2395CSV","text":"<p>FIXME This page is a stub.</p>"},{"location":"sysfns/qdr/","title":"\u2395DR","text":"<p>FIXME This page is a stub.</p>"},{"location":"sysfns/qjson/","title":"\u2395JSON","text":"<p>FIXME This page is a stub.</p>"},{"location":"sysfns/qshell/","title":"\u2395SHELL","text":"<p>FIXME This page is a stub.</p>"},{"location":"sysfns/qxml/","title":"\u2395XML","text":"<p>FIXME This page is a stub.</p>"}]}